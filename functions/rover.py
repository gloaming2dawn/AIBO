# -*- coding: utf-8 -*-

from .rover_utils import RoverDomain, PointBSpline, ConstObstacleCost, NegGeom, AABoxes, UnionGeom, AdditiveCosts, \
    ConstCost
from .synthetic import tracker
import numpy as np

def create_cost_small():
    c = np.array([[0.11353145, 0.17251116],
                  [0.4849413, 0.7684513],
                  [0.38840863, 0.10730809],
                  [0.32968556, 0.37542275],
                  [0.64342773, 0.32438415],
                  [0.42, 0.35],
                  [0.38745546, 0.0688907],
                  [0.05771529, 0.1670573],
                  [0.48750001, 0.67864249],
                  [0.5294646, 0.66245226],
                  [0.88495861, 0.76770809],
                  [0.71132462, 0.46580745],
                  [0.02038182, 0.32146063],
                  [0.34077448, 0.70446464],
                  [0.61490175, 0.79081785],
                  [0.37367616, 0.6720441],
                  [0.14711569, 0.57060365],
                  [0.76084188, 0.65168123],
                  [0.51038721, 0.78655373],
                  [0.50396508, 0.90299952],
                  [0.23763956, 0.38260748],
                  [0.40169679, 0.72553068],
                  [0.59670114, 0.08541569],
                  [0.5514408, 0.62855134],
                  [0.84606733, 0.94264543],
                  [0.8, 0.19590218],
                  [0.39181603, 0.46357532],
                  [0.44800403, 0.27380116],
                  [0.5681913, 0.1468706],
                  [0.37418262, 0.69210095]])

    l = c - 0.05
    h = c + 0.05

    r_box = np.array([[0.5, 0.5]])
    r_l = r_box - 0.5
    r_h = r_box + 0.5

    trees = AABoxes(l, h)
    r_box = NegGeom(AABoxes(r_l, r_h))
    obstacles = UnionGeom([trees, r_box])

    start = np.zeros(2) + 0.05
    goal = np.array([0.95, 0.95])

    costs = [ConstObstacleCost(obstacles, cost=20.), ConstCost(0.05)]
    cost_fn = AdditiveCosts(costs)
    return cost_fn, start, goal


def create_small_domain():
    cost_fn, start, goal = create_cost_small()

    n_points = 10
    traj = PointBSpline(dim=2, num_points=n_points)
    n_params = traj.param_size
    domain = RoverDomain(cost_fn,
                         start=start,
                         goal=goal,
                         traj=traj,
                         s_range=np.array([[-0.1, -0.1], [1.1, 1.1]]))

    return domain


def create_cost_large():
    c = np.array([[0.43143755, 0.20876147],
                  [0.38485367, 0.39183579],
                  [0.02985961, 0.22328303],
                  [0.7803707, 0.3447003],
                  [0.93685657, 0.56297285],
                  [0.04194252, 0.23598362],
                  [0.28049582, 0.40984475],
                  [0.6756053, 0.70939481],
                  [0.01926493, 0.86972335],
                  [0.5993437, 0.63347932],
                  [0.57807619, 0.40180792],
                  [0.56824287, 0.75486851],
                  [0.35403502, 0.38591056],
                  [0.72492026, 0.59969313],
                  [0.27618746, 0.64322757],
                  [0.54029566, 0.25492943],
                  [0.30903526, 0.60166842],
                  [0.2913432, 0.29636879],
                  [0.78512072, 0.62340245],
                  [0.29592116, 0.08400595],
                  [0.87548394, 0.04877622],
                  [0.21714791, 0.9607346],
                  [0.92624074, 0.53441687],
                  [0.53639253, 0.45127928],
                  [0.99892031, 0.79537837],
                  [0.84621631, 0.41891986],
                  [0.39432819, 0.06768617],
                  [0.92365693, 0.72217512],
                  [0.95520914, 0.73956575],
                  [0.820383, 0.53880139],
                  [0.22378049, 0.9971974],
                  [0.34023233, 0.91014706],
                  [0.64960636, 0.35661133],
                  [0.29976464, 0.33578931],
                  [0.43202238, 0.11563227],
                  [0.66764947, 0.52086962],
                  [0.45431078, 0.94582745],
                  [0.12819915, 0.33555344],
                  [0.19287232, 0.8112075],
                  [0.61214791, 0.71940626],
                  [0.4522542, 0.47352186],
                  [0.95623345, 0.74174186],
                  [0.17340293, 0.89136853],
                  [0.04600255, 0.53040724],
                  [0.42493468, 0.41006649],
                  [0.37631485, 0.88033853],
                  [0.66951947, 0.29905739],
                  [0.4151516, 0.77308712],
                  [0.55762991, 0.26400156],
                  [0.6280609, 0.53201974],
                  [0.92727447, 0.61054975],
                  [0.93206587, 0.42107549],
                  [0.63885574, 0.37540613],
                  [0.15303425, 0.57377797],
                  [0.8208471, 0.16566631],
                  [0.14889043, 0.35157346],
                  [0.71724622, 0.57110725],
                  [0.32866327, 0.8929578],
                  [0.74435871, 0.47464421],
                  [0.9252026, 0.21034329],
                  [0.57039306, 0.54356078],
                  [0.56611551, 0.02531317],
                  [0.84830056, 0.01180542],
                  [0.51282028, 0.73916524],
                  [0.58795481, 0.46527371],
                  [0.83259048, 0.98598188],
                  [0.00242488, 0.83734691],
                  [0.72505789, 0.04846931],
                  [0.07312971, 0.30147979],
                  [0.55250344, 0.23891255],
                  [0.51161315, 0.46466442],
                  [0.802125, 0.93440495],
                  [0.9157825, 0.32441602],
                  [0.44927665, 0.53380074],
                  [0.67708372, 0.67527231],
                  [0.81868924, 0.88356194],
                  [0.48228814, 0.88668497],
                  [0.39805433, 0.99341196],
                  [0.86671752, 0.79016975],
                  [0.01115417, 0.6924913],
                  [0.34272199, 0.89543756],
                  [0.40721675, 0.86164495],
                  [0.26317679, 0.37334193],
                  [0.74446787, 0.84782643],
                  [0.55560143, 0.46405104],
                  [0.73567977, 0.12776233],
                  [0.28080322, 0.26036748],
                  [0.17507419, 0.95540673],
                  [0.54233783, 0.1196808],
                  [0.76670967, 0.88396285],
                  [0.61297539, 0.79057776],
                  [0.9344029, 0.86252764],
                  [0.48746839, 0.74942784],
                  [0.18657635, 0.58127321],
                  [0.10377802, 0.71463978],
                  [0.7771771, 0.01463505],
                  [0.7635042, 0.45498358],
                  [0.83345861, 0.34749363],
                  [0.38273809, 0.51890558],
                  [0.33887574, 0.82842507],
                  [0.02073685, 0.41776737],
                  [0.68754547, 0.96430979],
                  [0.4704215, 0.92717361],
                  [0.72666234, 0.63241306],
                  [0.48494401, 0.72003268],
                  [0.52601215, 0.81641253],
                  [0.71426732, 0.47077212],
                  [0.00258906, 0.30377501],
                  [0.35495269, 0.98585155],
                  [0.65507544, 0.03458909],
                  [0.10550588, 0.62032937],
                  [0.60259145, 0.87110846],
                  [0.04959159, 0.535785]])

    l = c - 0.025
    h = c + 0.025

    r_box = np.array([[0.5, 0.5]])
    r_l = r_box - 0.5
    r_h = r_box + 0.5

    trees = AABoxes(l, h)
    r_box = NegGeom(AABoxes(r_l, r_h))
    obstacles = UnionGeom([trees, r_box])

    start = np.zeros(2) + 0.05
    goal = np.array([0.95, 0.95])

    costs = [ConstObstacleCost(obstacles, cost=20.), ConstCost(0.05)]
    cost_fn = AdditiveCosts(costs)
    return cost_fn, start, goal


def create_large_domain(force_start=False,
                        force_goal=False,
                        start_miss_cost=None,
                        goal_miss_cost=None):
    cost_fn, start, goal = create_cost_large()

    n_points = 30
    traj = PointBSpline(dim=2, num_points=n_points)
    n_params = traj.param_size
    domain = RoverDomain(cost_fn,
                         start=start,
                         goal=goal,
                         traj=traj,
                         start_miss_cost=start_miss_cost,
                         goal_miss_cost=goal_miss_cost,
                         force_start=force_start,
                         force_goal=force_goal,
                         s_range=np.array([[-0.1, -0.1], [1.1, 1.1]]))
    return domain

class NormalizedInputFn:
    def __init__(self, fn_instance, x_range):
        self.fn_instance = fn_instance
        self.x_range = x_range

    def __call__(self, x):
        return self.fn_instance(self.project_input(x))

    def project_input(self, x):
        return x * (self.x_range[1] - self.x_range[0]) + self.x_range[0]

    def inv_project_input(self, x):
        return (x - self.x_range[0]) / (self.x_range[1] - self.x_range[0])

    def get_range(self):
        return np.array([np.zeros(self.x_range[0].shape[0]), np.ones(self.x_range[0].shape[0])])


class ConstantOffsetFn:
    def __init__(self, fn_instance, offset):
        self.fn_instance = fn_instance
        self.offset = offset

    def __call__(self, x):
        return self.fn_instance(x) + self.offset

    def get_range(self):
        return self.fn_instance.get_range()

    
def l2cost(x, point):
    return 10 * np.linalg.norm(x - point, 1)

domain = create_large_domain(force_start=False,
                             force_goal=False,
                             start_miss_cost=l2cost,
                             goal_miss_cost=l2cost)
n_points = domain.traj.npoints
raw_x_range = np.repeat(domain.s_range, n_points, axis=1)
f_max = 5.0
f = ConstantOffsetFn(domain, f_max)
f = NormalizedInputFn(f, raw_x_range)

class Rover:
    def __init__(self, method='', verbose=False):
        self.dim    = 60
        self.lb      = np.zeros(self.dim)
        self.ub      = np.ones(self.dim)
        # x = np.array(
        #     [0.64874394,0.15119416,0.00807727,0.26699075,0.04120743,
        #      0.11374987,0.06688548,0.19515595,0.47719869,0.0888403,
        #      0.08529253,0.29090896,0.23296426,0.,0.01817864,
        #      1.,0.93355671,0.3963725,0.38795958,0.07492719,
        #      0.72018167,0.13814096,0.25138125,0.7578814,0.60108228,
        #      0.62777586,0.62168889,0.36517986,0.24742713,0.02581098,
        #      0.53953934,0.83273109,0.75801638,0.05753968,0.50667666,
        #      0.54586119,0.47245773,0.71408272,0.60903988,0.21996252,
        #      0.33335975,0.58167358,0.53900708,0.96814793,0.37544139,
        #      0.87684399,0.55395427,0.08761044,0.15549961,0.96608181,
        #      1.,0.49313447,0.65484905,1.,0.41753552,
        #      0.18684746,1.,1.,1.,1.,])
        # self.lb= np.clip(x-0.3*np.ones(self.dim),0,1)
        # self.ub= np.clip(x+0.3*np.ones(self.dim),0,1)
        self.counter = 0
        self.tracker = tracker('Rover60'+ '/'+method, verbose=verbose)
        

    def __call__(self, x):
        x = np.array(x)
        self.counter += 1
        assert len(x) == self.dim
        assert x.ndim == 1
        result = -f(x)
        self.tracker.track( result, x )
        return result

def main():
    # def l2cost(x, point):
    #     return 10 * np.linalg.norm(x - point, 1)

    # domain = create_large_domain(force_start=False,
    #                               force_goal=False,
    #                               start_miss_cost=l2cost,
    #                               goal_miss_cost=l2cost)
    # n_points = domain.traj.npoints

    # raw_x_range = np.repeat(domain.s_range, n_points, axis=1)


    # # maximum value of f
    # f_max = 5.0
    # f = ConstantOffsetFn(domain, f_max)
    # f = NormalizedInputFn(f, raw_x_range)
    # x_range = f.get_range()
    
    f=Rover()
    x = np.random.uniform(f.lb, f.ub)
    x = np.array(
        [0.02224671, 0.03499271, 0.49767277, 0.34999153, 0.03743523, 
         0.22276294, 0.03457248, 0.51612865, 0.61205186, 0.59440287, 
         0.38025369, 0.74485946, 0.21150444, 0.18649901, 0.33017188, 
         0.5782188,  0.46164447, 0.82141969, 0.41544705, 0.63965978, 
         0.58169071, 0.60471665, 0.95150311, 0.59552893, 0.23336905, 
         0.8163841,  0.12225269, 0.73513294, 0.7254501,  0.68222481, 
         0.01715399, 0.27156319, 0.44660489, 0.59126402, 0.9347234,  
         0.32459879, 0.7140134,  0.66317239, 0.51877546, 0.41724785, 
         0.13098403, 0.67135795, 0.56340505, 0.59698743, 0.50562872, 
         0.62264329, 0.91919847, 0.44277381, 0.63840834, 0.70749771, 
         0.96105645, 0.95304186, 0.90052181, 0.81220666, 0.52160107, 
         0.8264436,  0.99877989, 0.74128699, 0.63484308, 0.63873078])
    x = np.array(
        [0.35934683, 0.2623912, 0.06570075, 0.33132122, 0.05750078, 
         0.09921303, 0.03278235, 0.08407004, 0.42266877, 0.67857419, 
         0.19481164, 0.33043268, 0.18243564, 0.04268539, 0.79240836, 
         0.95232974, 0.15739457, 0.54396271, 0.3027731, 0.26707187, 
         0.85247977, 0.84190341, 0.33194459, 0.66567472, 0.70159048, 
         0.7919987, 0.09350248, 0.49002747, 0.56079077, 0.68137671, 
         0.35430007, 0.53873705, 0.25331742, 0.57316357, 0.35980438, 
         0.47693558, 0.54730013, 0.42709293, 0.68000438, 0.54328189, 
         0.81165914, 0.47794992, 0.93994003, 0.69641323, 0.51518047, 
         0.69744222, 0.90836106, 0.60879765, 0.12634216, 0.73111104, 
         0.98968284, 0.46686324, 0.80001716, 0.54848701, 0.82817851, 
         0.9260931, 0.96982459, 0.89188387, 0.67046298, 0.96420803])
    x = np.array(
        [0.10176738, 0.42303871, 0.26771983, 0.03132122, 0.18790911, 
         0.15511377, 0., 0.07440918, 0.42821987, 0.90675919, 
         0.1541043, 0.36922165, 0.48243564, 0.10116865, 0.74598209, 
         0.86826419, 0.41411433, 0.8333072, 0.00821314, 0.33583379, 
         0.6261587, 0.78993587, 0.63125049, 0.51656466, 0.68123546, 
         0.57076152, 0.00983884, 0.79002747, 0.5085603, 0.73932803, 
         0.62799944, 0.50744989, 0.23882537, 0.77379417, 0.08593799, 
         0.28766054, 0.77026686, 0.67881197, 0.46080937, 0.52688108, 
         0.51165914, 0.56197542, 0.99855266, 0.46034567, 0.51807222, 
         0.59911214, 1., 0.51659831, 0.12625926, 1., 
         0.89068463, 0.41556236, 0.67600576, 0.64792961, 0.96951832, 
         0.87209612, 0.99654521, 0.75781534, 0.65049462, 1., ])
    x = np.array(
        [0.64874394,0.15119416,0.00807727,0.26699075,0.04120743,
         0.11374987,0.06688548,0.19515595,0.47719869,0.0888403,
         0.08529253,0.29090896,0.23296426,0.,0.01817864,
         1.,0.93355671,0.3963725,0.38795958,0.07492719,
         0.72018167,0.13814096,0.25138125,0.7578814,0.60108228,
         0.62777586,0.62168889,0.36517986,0.24742713,0.02581098,
         0.53953934,0.83273109,0.75801638,0.05753968,0.50667666,
         0.54586119,0.47245773,0.71408272,0.60903988,0.21996252,
         0.33335975,0.58167358,0.53900708,0.96814793,0.37544139,
         0.87684399,0.55395427,0.08761044,0.15549961,0.96608181,
         1.,0.49313447,0.65484905,1.,0.41753552,
         0.18684746,1.,1.,1.,1.,])
    x = np.array([4.66706877e-02,6.54414015e-01,2.18211757e-01,3.26349805e-05
,4.71507195e-02,1.23662259e-01,2.10620724e-04,7.78869126e-02
,1.83067076e-01,2.84268411e-01,9.82385844e-01,6.67796344e-01
,7.19733306e-01,6.43010668e-03,2.16642520e-01,8.44016602e-01
,5.59166407e-01,6.00123346e-01,3.79936509e-01,9.92924951e-01
,1.80808509e-01,5.87998542e-01,2.52798843e-01,3.93718656e-01
,3.78743308e-02,9.62862364e-01,9.26118443e-02,6.50395794e-04
,2.50079094e-01,8.97942464e-01,2.82709268e-01,7.32611079e-01
,9.99904569e-01,6.80734134e-01,6.59265528e-01,8.92065550e-01
,7.00274950e-01,4.95495570e-01,9.39319404e-01,8.82055523e-01
,6.37188382e-01,5.73110106e-01,8.65572835e-01,5.62940246e-03
,5.73546596e-04,9.90780999e-01,5.95912846e-01,1.90565273e-01
,2.62620937e-01,8.26372465e-01,5.67962145e-01,2.67501439e-01
,9.86894972e-01,9.96231432e-01,9.94305457e-01,4.54286477e-01
,5.94462009e-01,9.98562617e-01,9.86993138e-01,9.36128910e-01])
    print('Input = {}'.format(x))
    print('Output = {}'.format(f(x)))


if __name__ == "__main__":
    main()